/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package mic.crm.struts.action;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import mic.crm.common.customer.CustomerDetailsENT;
import mic.crm.common.customer.CustomerENT;
import mic.crm.common.customer.CustomerLST;
import mic.crm.hibernate.SellDAOManager;
import mic.crm.hibernate.customer.CustomerDAOInterface;
import mic.crm.tools.NVL;
import mic.crm.tools.UTF8;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 * MyEclipse Struts Creation date: 05-21-2012
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="list" path="/pages/customer/customerList.jsp"
 */
public class CustomerAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward af = null;
		String reqCode = "";
		reqCode = request.getParameter("reqCode");
		if (reqCode == null || reqCode.equalsIgnoreCase("list")) {
			CustomerLST customerLST = new CustomerLST();
			CustomerLST lst = new CustomerLST();
			if(request.getParameter("keyword")!=null)
				lst.setKeyword(request.getParameter("keyword"));
			customerLST = getDAO().getCustomerLST(lst);
			request.setAttribute("list", customerLST);
			af = mapping.findForward("list");
		} else if (reqCode.equals("edit") || reqCode.equals("new")) {
			CustomerENT ent = new CustomerENT();
			if (reqCode.equals("edit")) {
				ent.setClientNo(request.getParameter("clientNo"));
				ent = getDAO().getCustomerENT(ent);
			}
			request.setAttribute("customer", ent);
			af = mapping.findForward("edit");
		} else if (reqCode.equals("save") || reqCode.equals("update")) {
			CustomerENT customerENT = new CustomerENT();
			customerENT.setAddContact(request.getParameter("addcontact"));
			customerENT.setClientNameEn(request.getParameter("clientNameEn"));
			customerENT.setClientNameFa(UTF8.cnvUTF8(request
					.getParameter("clientNameFa")));
			customerENT.setClientNo(request.getParameter("clientNo"));
			customerENT.seteMail(request.getParameter("eMail"));
			customerENT.setFamilyN(request.getParameter("familyN"));
			customerENT.setMobile(request.getParameter("mobile"));
			customerENT.setName(request.getParameter("name"));
			customerENT.setPosition(request.getParameter("position"));
			customerENT.setSiteStatus(NVL.getInt(request
					.getParameter("siteStatus")));
			customerENT.setWebSite(request.getParameter("website"));
			ArrayList<CustomerDetailsENT> detailsENTs = new ArrayList<CustomerDetailsENT>();
			String[] enscope = request.getParameterValues("scopeEn");
			String[] fascope = request.getParameterValues("scopeFa");
			String[] enaddress = request.getParameterValues("addressEn");
			String[] faaddress = request.getParameterValues("addressFa");
			String[] employeen = request.getParameterValues("employeeNo");
			String[] id = null;
			if (reqCode.equalsIgnoreCase("update"))
				id = request.getParameterValues("id");
			for (int i = 0; i < enscope.length; i++) {
				CustomerDetailsENT detailsENT = new CustomerDetailsENT();
				detailsENT.setScopeEn(enscope[i]);
				detailsENT.setScopeFa(fascope[i]);
				detailsENT.setAddressEn(enaddress[i]);
				detailsENT.setAddressFa(faaddress[i]);
				detailsENT.setEmployeeNo(Integer.parseInt(employeen[i]));
				detailsENT.setClientNo(customerENT.getClientNo());
				if (reqCode.equalsIgnoreCase("update"))
					detailsENT.setId(Integer.parseInt(id[i]));
				detailsENTs.add(detailsENT);
			}
			customerENT.setCustomerDetailsENTs(detailsENTs);
			getDAO().save(customerENT);
			request.setAttribute("customer", customerENT);
			af = mapping.findForward("edit");
		}
		return af;
	}

	private static CustomerDAOInterface getDAO() {
		return SellDAOManager.getCustomerDAOInterface();
	}

	private ArrayList<CustomerENT> customerlistGenerator() {
		ArrayList<CustomerENT> customerENTs = new ArrayList<CustomerENT>();
		for (int i = 0; i < 10; i++) {
			CustomerENT ent = new CustomerENT();
			ent.setClientNameEn("name" + i);
			ent.setClientNo("clientNo" + i);
			ent.setClientNameFa("nameFa" + i);
			customerENTs.add(ent);
		}
		return customerENTs;
	}
}